package com.enviosya.envios.sessionbean;

import com.enviosya.envios.dominio.Envio;
import com.enviosya.envios.dto.EnvioDto;
import com.enviosya.envios.dto.EnvioMensaje;
import com.enviosya.envios.excepcion.DatoIncorrectoException;
import com.enviosya.envios.excepcion.EntidadNoExisteException;
import com.enviosya.envios.excepcion.ErrorUrlException;
import com.enviosya.envios.excepcion.JmsExcepcion;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.ejb.LocalBean;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.core.Response;
import org.apache.log4j.Logger;
import org.json.JSONObject;

@Stateless
@LocalBean
public class EnvioBean {

    static Logger log = Logger.getLogger(EnvioBean.class.getName());

    private static final String URI_CLIENT = "http://localhost:8080/Clientes-war/cliente";
    private static final String URI_CADET = "http://localhost:8080/Cadetes-war/cadete";
    private static final String URI_CADET_CERCANOS = "http://localhost:8080/Cadetes-war/cadete/buscar";
    private static final String URI_CALCULAR_TAMANO = "https://ort-arqsoftort-sizer.herokuapp.com/dimensions";

    Gson gson = new Gson();

    @PersistenceContext
    private EntityManager em;

    @Resource(lookup = "jms/ConnectionFactory")
    private ConnectionFactory cf;

    @Resource(lookup = "jms/QueueCadete")
    private Queue queueCadete;

    @Resource(lookup = "jms/QueueCliente")
    private Queue queueCliente;

    @PostConstruct
    private void init() {
    }

    public void notificarCadeteCola(String json) throws JmsExcepcion {
        try {
            Connection connection = cf.createConnection();
            Session session = connection.createSession();
            TextMessage msg = session.createTextMessage(json);
            MessageProducer producer = session.createProducer(queueCadete);
            producer.send(msg);
            session.close();
            connection.close();
        } catch (JMSException ex) {
            log.debug("Módulo Envío - Encolar - Excepción: " + ex.toString());
            throw new JmsExcepcion("Excepción: " + ex.toString());
        }
    }

    public void notificarClienteCola(String json) throws JmsExcepcion {
        try {
            Connection connection = cf.createConnection();
            Session session = connection.createSession();
            TextMessage msg = session.createTextMessage(json);
            MessageProducer producer = session.createProducer(queueCliente);
            producer.send(msg);
            session.close();
            connection.close();
        } catch (JMSException ex) {
            log.debug("Módulo Envío - Encolar - Excepción: " + ex.toString());
            throw new JmsExcepcion("Excepción: " + ex.toString());
        }
    }

    public List<EnvioDto> listar() throws EntidadNoExisteException {
        List<EnvioDto> lista = convertirADto(em.createQuery(
                "SELECT e FROM Envio e").getResultList());
        if (lista.isEmpty()) {
            log.debug("Módulo Envío - Listar Envíos - Error: No se han registrado envíos.");
            throw new EntidadNoExisteException("No se han registrado envíos.");
        } else {
            return lista;
        }
    }

    public EnvioDto buscar(String id) throws EntidadNoExisteException, DatoIncorrectoException {
        Long idLong = Long.parseLong(id);
        if (id != null) {
            Envio envio = em.find(Envio.class, idLong);
            if (envio == null) {
                log.debug("Módulo Envíos - Buscar Envío - Error: No existe envío con ID " + id);
                throw new EntidadNoExisteException("No existe envío con ID " + id);
            } else {
                return convertirADto(envio);
            }
        }
        log.debug("Módulo Envíos - Buscar Envío - Error: ID de envío incorrecto.");
        throw new DatoIncorrectoException("Error en el ID del envío.");
    }

    public List<JSONObject> getUrl(String urlRecibida, String id)
            throws MalformedURLException, IOException, ErrorUrlException {
        String urlRecibidaParametros = urlRecibida;
        if (!id.equals("")) {
            urlRecibidaParametros += "/obtener?id=" + id;
        }
        try {
            URL url = new URL(urlRecibidaParametros);

            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Content-Type", "application/json");

            int code = conn.getResponseCode();

            if (conn.getResponseCode() != 200) {
                System.out.println(conn.getResponseCode());
                System.out.println(conn.getResponseMessage());
                throw new ErrorUrlException("Error: HTTP error code: "
                        + conn.getResponseCode());
            }

            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String output = "";
            String reader;

            List<JSONObject> retorno = new ArrayList<JSONObject>();

            while ((reader = br.readLine()) != null) {
                output += reader;
                String out = output;
                out = out.replace('[', ' ');
                out = out.replace(']', ' ');
                JSONObject object = new JSONObject(out);
                retorno.add(object);
            }
            conn.disconnect();
            return retorno;

        } catch (MalformedURLException e) {
            log.debug("Módulo Envíos - URL - Error: URL inválida: " + urlRecibidaParametros);
            throw new ErrorUrlException("URL inválida: " + urlRecibidaParametros);
        }
    }

    public String getUrlString(String urlRecibida, String id)
            throws MalformedURLException, IOException, ErrorUrlException {
        String urlRecibidaParametros = urlRecibida;
        if (!id.equals("")) {
            urlRecibidaParametros += "/obtener?id=" + id;
        }
        try {
            URL url = new URL(urlRecibidaParametros);

            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Content-Type", "application/json");

            int code = conn.getResponseCode();

            if (conn.getResponseCode() != 200) {
                System.out.println(conn.getResponseCode());
                System.out.println(conn.getResponseMessage());
                throw new ErrorUrlException("Error: HTTP error code: "
                        + conn.getResponseCode());
            }

            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String output = "";
            String reader;

            while ((reader = br.readLine()) != null) {
                output += reader;
                String out = output;
                out = out.replace('[', ' ');
                out = out.replace(']', ' ');
            }

            conn.disconnect();
            return output;

        } catch (MalformedURLException e) {
            log.debug("Módulo Envíos - URL - Error: URL inválida: " + urlRecibidaParametros);
            throw new ErrorUrlException("URL inválida: " + urlRecibidaParametros);
        }
    }

    public String getUrlCalcularTamano(String urlRecibida)
            throws MalformedURLException, IOException, ErrorUrlException {
        try {
            URL url = new URL(urlRecibida);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("X-Mashape-Key", "<required>");
            conn.setRequestProperty("Accept", "application/json");

            String json = "{\"image\":\",/9j/4AAQSkZJRgABAQEAYABgAAD/4RD6RXhpZgAATU0AKgAAAAgABAE7AAIAAAAQAAAISodpAAQAAAABAAAIWpydAAEAAAAgAAAQ0uocAAcAAAgMAAAAPgAAAAAc6gAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEdvbnphbG8gUGVyZWlyYQAABZADAAIAAAAUAAAQqJAEAAIAAAAUAAAQvJKRAAIAAAADOTYAAJKSAAIAAAADOTYAAOocAAcAAAgMAAAInAAAAAAc6gAAAAgwMTY6MTE6MTkgMTE6MjI6NDkAMjAxNjoxMToxOSAxMToyMjo0OQAAAEcAbwBuAHoAYQBsAG8AIABQAGUAcgBlAGkAcgBhAAAA/+ELImh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSfvu78nIGlkPSdXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQnPz4NCjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iPjxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9InV1aWQ6ZmFmNWJkZDUtYmEzZC0xMWRhLWFkMzEtZDMzZDc1MTgyZjFiIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iLz48cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0idXVpZDpmYWY1YmRkNS1iYTNkLTExZGEtYWQzMS1kMzNkNzUxODJmMWIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+PHhtcDpDcmVhdGVEYXRlPjIwMTYtMTEtMTlUMTE6MjI6NDkuOTU4PC94bXA6Q3JlYXRlRGF0ZT48L3JkZjpEZXNjcmlwdGlvbj48cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0idXVpZDpmYWY1YmRkNS1iYTNkLTExZGEtYWQzMS1kMzNkNzUxODJmMWIiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyI+PGRjOmNyZWF0b3I+PHJkZjpTZXEgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj48cmRmOmxpPkdvbnphbG8gUGVyZWlyYTwvcmRmOmxpPjwvcmRmOlNlcT4NCgkJCTwvZGM6Y3JlYXRvcj48L3JkZjpEZXNjcmlwdGlvbj48L3JkZjpSREY+PC94OnhtcG1ldGE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/eHBhY2tldCBlbmQ9J3cnPz7/2wBDAAcFBQYFBAcGBQYIBwcIChELCgkJChUPEAwRGBUaGRgVGBcbHichGx0lHRcYIi4iJSgpKywrGiAvMy8qMicqKyr/2wBDAQcICAoJChQLCxQqHBgcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKir/wAARCAFiAJkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEI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\"\n"
                    + "}";

            OutputStream os = conn.getOutputStream();
            os.write(json.getBytes());
            os.flush();

            int code = conn.getResponseCode();
            if (conn.getResponseCode() != 200) {
                System.out.println(conn.getResponseCode());
                System.out.println(conn.getResponseMessage());
                throw new ErrorUrlException("Error: HTTP error code: "
                        + conn.getResponseCode());
            }

            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String output = "";
            String reader;

            while ((reader = br.readLine()) != null) {
                output += reader;
                String out = output;
                out = out.replace('[', ' ');
                out = out.replace(']', ' ');
            }
            conn.disconnect();
            return output;
        } catch (MalformedURLException e) {
            log.debug("Módulo Envíos - URL - Error: URL inválida: " + urlRecibida);
            throw new ErrorUrlException("URL inválida: " + urlRecibida);
        }
    }

    public String crearEnvio(String json) throws IOException, ErrorUrlException, DatoIncorrectoException {
        String cadetes;
        List<JSONObject> emisor = null;
        List<JSONObject> receptor = null;

        Map<String, Object> map = new HashMap<>();
        map = (Map<String, Object>) gson.fromJson(json, map.getClass());

        if (!datosCorrectos(map)) {
            log.debug("Módulo Envíos - Crear Envío - Error: faltan datos");
            throw new DatoIncorrectoException("Faltan datos.");
        } else {
            String idClienteEmisor = map.get("clienteEmisor").toString();
            emisor = getUrl(URI_CLIENT, idClienteEmisor);

            String idClienteReceptor = map.get("clienteReceptor").toString();
            receptor = getUrl(URI_CLIENT, idClienteReceptor);

            if (emisor == null) {
                //emisor inválido 
                log.debug("Módulo Envíos - Crear Envío - Error: El ID del cliente emisor no es válido.");
                throw new DatoIncorrectoException("El ID del cliente emisor no es válido.");
            } else if (receptor == null) {
                //receptor inválido
                log.debug("Módulo Envíos - Crear Envío - Error: El ID del cliente receptor no es válido.");
                throw new DatoIncorrectoException("El ID del cliente receptor no es válido.");
            } else if (idClienteEmisor.equals(idClienteReceptor)) {
                //el emisor es igual al receptor
                log.debug("Módulo Envíos - Crear Envío - "
                        + "Error: El ID del cliente emisor es igual al del cliente receptor.");
                throw new DatoIncorrectoException("El ID del cliente emisor es igual al del cliente receptor.");
            } else {
                cadetes = devolverCadetesDisponibles(idClienteEmisor, idClienteReceptor, map);
            }
        }
        return cadetes;
    }

    public String devolverCadetesDisponibles(String idEmisor, String idReceptor, Map<String, Object> map)
            throws IOException, ErrorUrlException, DatoIncorrectoException {
        EnvioDto envio;
        String descripcion = map.get("descripcion").toString();
        int formaPago = Integer.parseInt(map.get("formaPago").toString());
        String direccionRecibo = map.get("direccionRecibo").toString();
        String direccionRetiro = map.get("direccionRetiro").toString();
        double comision = 0;
        String fotoPaquete = map.get("fotoPaquete").toString();
        comision = calcularTamano(fotoPaquete);

        String cadetes = getUrlString(URI_CADET_CERCANOS, "");

        if (cadetes != null) {
            envio = new EnvioDto();
            envio.setClienteEmisor(Long.parseLong(idEmisor));
            envio.setClienteReceptor(Long.parseLong(idReceptor));
            envio.setFormaPago(formaPago);
            envio.setComision(comision);
            envio.setFotoPaquete(fotoPaquete);
            envio.setDescripcion(descripcion);
            envio.setDireccionRecibo(direccionRecibo);
            envio.setDireccionRetiro(direccionRetiro);
            envio.setEstadoEnvio(0);

            Envio envioEntity = null;
            envioEntity = convertirAEntity(envio);
            em.persist(envioEntity);

            return gson.toJson(cadetes);
        } else {
            log.debug("Módulo Envíos - Crear Envío - Error: No hay cadetes disponibles.");
            throw new DatoIncorrectoException("No hay cadetes disponibles.");
        }
    }

    public EnvioDto confirmarEnvio(String json)
            throws IOException, EntidadNoExisteException, DatoIncorrectoException, ErrorUrlException, JmsExcepcion {
        Response response = null;
        EnvioDto envio = null;
        String cadete = null;

        Map<String, Object> map = new HashMap<>();
        map = (Map<String, Object>) gson.fromJson(json, map.getClass());

        String idEnvio = map.get("envio").toString();
        envio = buscar(idEnvio);

        if (envio != null) {
            String idCadete = map.get("cadete").toString();
            cadete = getUrlString(URI_CADET, idCadete);

            if (cadete != null) {
                envio = asignarCadete(idEnvio, idCadete);

                Map<String, Object> mapCadete = new HashMap<>();
                mapCadete = (Map<String, Object>) gson.fromJson(cadete, mapCadete.getClass());

                String email = mapCadete.get("email").toString();
                String mensaje = "Descripción del envío: " + envio.getDescripcion().toString()
                        + "\n" + "Dirección retiro: " + envio.getDireccionRetiro().toString()
                        + "\n" + "Dirección recibo: " + envio.getDireccionRecibo().toString()
                        + "\n" + "Forma de pago: " + envio.getFormaPago()
                        + "\n" + "Comisión: " + envio.getComision();

                EnvioMensaje envioMensaje = new EnvioMensaje();
                envioMensaje.setDestinatario(email);
                envioMensaje.setAsunto("Nuevo envío");
                envioMensaje.setMensaje(mensaje);
                

                notificarCadeteCola(gson.toJson(envioMensaje));

                return envio;

            } else {
                log.debug("Módulo Envíos - Confirmar Envío - Error: ID de cadete incorrecto.");
                throw new DatoIncorrectoException("Error en el ID del cadete.");
            }
        } else {
            log.debug("Módulo Envíos - Confirmar Envío - Error: ID de envío incorrecto.");
            throw new DatoIncorrectoException("Error: ID de envío incorrecto.");
        }
    }

    public EnvioDto asignarCadete(String idEnvio, String idCadete) throws EntidadNoExisteException {
        Long idEnvioLong = Long.parseLong(idEnvio);
        Long idCadeteLong = Long.parseLong(idCadete);
        Envio envio = em.find(Envio.class, idEnvioLong);
        if (envio == null) {
            log.debug("Módulo Envíos - Asignar Cadete - Error: No existe envío con ID " + idEnvio);
            throw new EntidadNoExisteException("No existe envío con ID " + idEnvio);
        } else {
            envio.setCadete(idCadeteLong);
            em.merge(envio);
            return convertirADto(envio);
        }
    }

    public EnvioDto recepcionEnvio(String idEnvio)
            throws EntidadNoExisteException, DatoIncorrectoException, IOException, ErrorUrlException, JmsExcepcion {
        EnvioDto envio = null;
        String emisor = null;
        String receptor = null;
        String cadete = null;

        envio = buscar(idEnvio);
        if (envio != null) {
            if (envio.getEstadoEnvio() == 0) {
                Long cad = envio.getCadete();
                if (cad != null) {
                    String idEmisor = envio.getClienteEmisor().toString();
                    emisor = getUrlString(URI_CLIENT, idEmisor);

                    String idReceptor = envio.getClienteReceptor().toString();
                    receptor = getUrlString(URI_CLIENT, idReceptor);

                    String idCadete = envio.getCadete().toString();
                    cadete = getUrlString(URI_CADET, idCadete);

                    Map<String, Object> mapEmisor = new HashMap<>();
                    mapEmisor = (Map<String, Object>) gson.fromJson(emisor, mapEmisor.getClass());

                    Map<String, Object> mapReceptor = new HashMap<>();
                    mapReceptor = (Map<String, Object>) gson.fromJson(emisor, mapReceptor.getClass());

                    Map<String, Object> mapCadete = new HashMap<>();
                    mapCadete = (Map<String, Object>) gson.fromJson(cadete, mapCadete.getClass());

                    String mensaje = cuerpoMensaje(envio, mapCadete);

                    String emailEmisor = mapEmisor.get("email").toString();
                    String emailReceptor = mapReceptor.get("email").toString();
                    enviarMensaje(emailEmisor, mensaje);
                    enviarMensaje(emailReceptor, mensaje);

                    envio = actualizarEstado(envio);
                } else {
                    log.debug("Módulo Envíos - Recepción de Envío - Error: El envío no tiene un cadete asignado.");
                    throw new DatoIncorrectoException("El envío no tiene un cadete asignado.");
                }
            } else {
                log.debug("Módulo Envíos - Recepción de Envío - Error: El envío ya fue recibido.");
                throw new DatoIncorrectoException("El envío ya fue recibido.");
            }
        } else {
            log.debug("Módulo Envíos - Recepción de Envío - Error: ID de envío incorrecto.");
            throw new DatoIncorrectoException("Error: ID de envío incorrecto.");
        }
        return envio;
    }

    private void enviarMensaje(String destinatario, String mensaje) throws JmsExcepcion {
        EnvioMensaje envioMensajeEmisor = new EnvioMensaje();
        envioMensajeEmisor.setDestinatario(destinatario);
        envioMensajeEmisor.setAsunto("Recepción de envío");
        envioMensajeEmisor.setMensaje(mensaje);
        notificarCadeteCola(gson.toJson(envioMensajeEmisor));
    }

    private String cuerpoMensaje(EnvioDto envio, Map<String, Object> mapCadete) throws JmsExcepcion {
        String mensaje = "Descripción del envío: " + envio.getDescripcion() + "\n";
        mensaje += "Dirección retiro: " + envio.getDireccionRetiro() + "\n";
        mensaje += "Dirección recibo: " + envio.getDireccionRecibo() + "\n";
        mensaje += "Cadete asignado: " + mapCadete.get("nombre").toString() + " "
                + mapCadete.get("apellido").toString() + "\n";
        String url = "http://localhost:8080/Comentarios-war/comentario/crear/";
        mensaje += "Link para calificar el servicio: " + url + "\n";
        return mensaje;
    }

    private EnvioDto actualizarEstado(EnvioDto envio) {
        envio.setEstadoEnvio(1);
        Envio envioEntity = convertirAEntity(envio);
        em.merge(envioEntity);
        return envio;
    }

    private boolean datosCorrectos(Map<String, Object> map) {
        List<String> datosEnvio = new ArrayList<String>();
        datosEnvio.add("clienteEmisor");
        datosEnvio.add("clienteReceptor");
        datosEnvio.add("descripcion");
        datosEnvio.add("direccionRecibo");
        datosEnvio.add("direccionRetiro");
        datosEnvio.add("formaPago");
        datosEnvio.add("fotoPaquete");

        for (int i = 0; i < datosEnvio.size(); i++) {
            String dato = datosEnvio.get(i);
            Set<String> keys = map.keySet();
            if (!keys.contains(dato)) {
                return false;
            }
        }
        return true;
    }

    private double calcularTamano(String fotoPaquete) throws IOException, ErrorUrlException, DatoIncorrectoException {
        double tamano = 0;
        String dimensiones;
        dimensiones = getUrlCalcularTamano(URI_CALCULAR_TAMANO);

        if (dimensiones != null) {
            Map<String, Object> map = new HashMap<>();
            map = (Map<String, Object>) gson.fromJson(dimensiones, map.getClass());
            String altura = map.get("height").toString();
            String longitud = map.get("length").toString();
            String peso = map.get("weight").toString();
            tamano = Double.parseDouble(altura) * Double.parseDouble(longitud) * Double.parseDouble(peso);
            return tamano;
        } else {
            log.debug("Módulo Envíos - Calcular Tamaño del paquete - Error: No se pudo calcular el tamaño.");
            throw new DatoIncorrectoException("No se pudo calcular el tamaño.");
        }
    }

    public boolean eliminar(Long id) {
        Envio envio = em.find(Envio.class,
                id);
        if (envio != null) {
            em.remove(envio);
            return true;
        }
        return false;
    }

    private EnvioDto convertirADto(Envio entity) {
        EnvioDto dto = new EnvioDto();
        dto.setId(entity.getId());
        dto.setDescripcion(entity.getDescripcion());
        dto.setDireccionRetiro(entity.getDireccionRetiro());
        dto.setDireccionRecibo(entity.getDireccionRecibo());
        dto.setCadete(entity.getCadete());
        dto.setClienteEmisor(entity.getClienteEmisor());
        dto.setClienteReceptor(entity.getClienteReceptor());
        dto.setFormaPago(entity.getFormaPago());
        dto.setComision(entity.getComision());
        dto.setEstadoEnvio(entity.getEstadoEnvio());
        return dto;
    }

    private List<EnvioDto> convertirADto(List<Envio> envios) {
        List<EnvioDto> dtos = new ArrayList<>();
        for (Envio envio : envios) {
            dtos.add(convertirADto(envio));
        }
        return dtos;
    }

    private Envio convertirAEntity(EnvioDto dto) {
        Envio entity = new Envio();
        entity.setDescripcion(dto.getDescripcion());
        entity.setDireccionRetiro(dto.getDireccionRetiro());
        entity.setDireccionRecibo(dto.getDireccionRecibo());
        entity.setCadete(dto.getCadete());
        entity.setClienteEmisor(dto.getClienteEmisor());
        entity.setClienteReceptor(dto.getClienteReceptor());
        entity.setFormaPago(dto.getFormaPago());
        entity.setComision(dto.getComision());
        entity.setEstadoEnvio(dto.getEstadoEnvio());
        return entity;
    }
}
